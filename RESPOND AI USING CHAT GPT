{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Tariq-Anwar/CHATBBOT/blob/master/RESPOND%20AI%20USING%20CHAT%20GPT\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Thank you from giving me this wonderful opportunity."
      ],
      "metadata": {
        "id": "05OcViAyTwsH"
      },
      "id": "05OcViAyTwsH"
    },
    {
      "cell_type": "markdown",
      "id": "e1af79aa",
      "metadata": {
        "id": "e1af79aa"
      },
      "source": [
        "## 1) IMPORTING REQUIRED LIBRARY FOR CHATGPT3 TO RUN"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d3b88a94",
      "metadata": {
        "id": "d3b88a94",
        "outputId": "9d07da23-3827-494c-e99e-899514e2db0b"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\91936\\anaconda3\\lib\\site-packages\\scipy\\__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.3\n",
            "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
          ]
        }
      ],
      "source": [
        "from langchain.embeddings.openai import OpenAIEmbeddings\n",
        "from langchain.vectorstores import chroma\n",
        "from langchain.text_splitter import CharacterTextSplitter\n",
        "from langchain import OpenAI,VectorDBQA\n",
        "from langchain.document_loaders import DirectoryLoader\n",
        "from langchain.document_loaders import UnstructuredFileLoader\n",
        "from langchain.chains.summarize import load_summarize_chain\n",
        "from langchain.chains.question_answering import load_qa_chain\n",
        "import os\n",
        "import nltk\n",
        "from langchain.document_loaders import UnstructuredPDFLoader, OnlinePDFLoader, PyPDFLoader\n",
        "from langchain.text_splitter import RecursiveCharacterTextSplitter\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "59b589f2",
      "metadata": {
        "id": "59b589f2"
      },
      "source": [
        "# 2) Load your data"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "aeacec72",
      "metadata": {
        "id": "aeacec72"
      },
      "source": [
        "# HERE I AM USING CAN'T HURT ME MASTER YOUR MIND BY DAVID GOGGINS PDF FILE WHICH IS LOADED INTO DATABASE TO ANSWER MY QUESTION"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d966f7fe",
      "metadata": {
        "id": "d966f7fe"
      },
      "outputs": [],
      "source": [
        "loader = PyPDFLoader(\"Cant Hurt Me_ Master Your Mind and Defy the Odds.pdf\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5ad148f6",
      "metadata": {
        "id": "5ad148f6"
      },
      "outputs": [],
      "source": [
        "data = loader.load()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "823f7d76",
      "metadata": {
        "id": "823f7d76",
        "outputId": "f0ab55b9-32db-4362-e710-815a48e8be27"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "You have 306 document(s) in your data\n",
            "There are 1025 characters in your document\n"
          ]
        }
      ],
      "source": [
        "# Note: If you're using PyPDFLoader then it will split by page for you already\n",
        "print (f'You have {len(data)} document(s) in your data')\n",
        "print (f'There are {len(data[30].page_content)} characters in your document')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8fa06526",
      "metadata": {
        "id": "8fa06526"
      },
      "source": [
        "### 3) Chunk your data up into smaller documents.\n",
        "### Here I embedding into split the documents"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "642ce22a",
      "metadata": {
        "id": "642ce22a"
      },
      "outputs": [],
      "source": [
        "text_splitter = RecursiveCharacterTextSplitter(chunk_size=2000, chunk_overlap=0)\n",
        "texts = text_splitter.split_documents(data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1e4b5a49",
      "metadata": {
        "id": "1e4b5a49",
        "outputId": "50da0a2d-dd8f-45e2-fe50-dc301fe4bb09"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Now you have 498 documents\n"
          ]
        }
      ],
      "source": [
        "print (f'Now you have {len(texts)} documents')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b6131304",
      "metadata": {
        "id": "b6131304"
      },
      "source": [
        "Create embeddings of your documents to get ready for semantic search"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ff0968d7",
      "metadata": {
        "id": "ff0968d7",
        "outputId": "6d868b36-8b4b-4dc4-e88e-17f811c1d32b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pinecone-client in c:\\users\\91936\\anaconda3\\lib\\site-packages (2.2.2)\n",
            "Requirement already satisfied: tqdm>=4.64.1 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from pinecone-client) (4.65.0)\n",
            "Requirement already satisfied: requests>=2.19.0 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from pinecone-client) (2.31.0)\n",
            "Requirement already satisfied: dnspython>=2.0.0 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from pinecone-client) (2.3.0)\n",
            "Requirement already satisfied: numpy>=1.22.0 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from pinecone-client) (1.24.3)\n",
            "Requirement already satisfied: python-dateutil>=2.5.3 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from pinecone-client) (2.8.2)\n",
            "Requirement already satisfied: pyyaml>=5.4 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from pinecone-client) (6.0)\n",
            "Requirement already satisfied: urllib3>=1.21.1 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from pinecone-client) (1.26.9)\n",
            "Requirement already satisfied: loguru>=0.5.0 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from pinecone-client) (0.7.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from pinecone-client) (4.6.3)\n",
            "Requirement already satisfied: win32-setctime>=1.0.0 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from loguru>=0.5.0->pinecone-client) (1.1.0)\n",
            "Requirement already satisfied: colorama>=0.3.4 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from loguru>=0.5.0->pinecone-client) (0.4.4)\n",
            "Requirement already satisfied: six>=1.5 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from python-dateutil>=2.5.3->pinecone-client) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from requests>=2.19.0->pinecone-client) (2.0.4)\n",
            "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from requests>=2.19.0->pinecone-client) (3.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\91936\\anaconda3\\lib\\site-packages (from requests>=2.19.0->pinecone-client) (2021.10.8)\n"
          ]
        }
      ],
      "source": [
        "!pip3 install pinecone-client"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e9617491",
      "metadata": {
        "id": "e9617491"
      },
      "source": [
        "### 4) Create embeddings of your documents to get ready for semantic search"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "47e25488",
      "metadata": {
        "id": "47e25488",
        "outputId": "4f4ef41d-7bc0-4507-bb67-e57f7ba76d42"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\91936\\anaconda3\\lib\\site-packages\\pinecone\\index.py:4: TqdmExperimentalWarning: Using `tqdm.autonotebook.tqdm` in notebook mode. Use `tqdm.tqdm` instead to force console mode (e.g. in jupyter console)\n",
            "  from tqdm.autonotebook import tqdm\n"
          ]
        }
      ],
      "source": [
        "from langchain.vectorstores import Chroma, Pinecone\n",
        "from langchain.embeddings.openai import OpenAIEmbeddings\n",
        "import pinecone"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d1671723",
      "metadata": {
        "id": "d1671723"
      },
      "outputs": [],
      "source": [
        "# Check to see if there is an environment variable with you API keys, if not, use what you put below\n",
        "OPENAI_API_KEY = os.environ.get('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')\n",
        "\n",
        "PINECONE_API_KEY = os.environ.get('PINECONE_API_KEY', '1eb8ff4a-cf25-4f7d-8f5b-26cbed6927ce')\n",
        "PINECONE_API_ENV = os.environ.get('PINECONE_API_ENV', 'us-west1-gcp-free') # You may need to switch with"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "49d67430",
      "metadata": {
        "id": "49d67430",
        "outputId": "fed917ff-8d2d-45a6-931d-0f85f6bdb62e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "None\n"
          ]
        }
      ],
      "source": [
        "print(OPENAI_API_KEY)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fe98bd4a",
      "metadata": {
        "id": "fe98bd4a"
      },
      "outputs": [],
      "source": [
        "embeddings = OpenAIEmbeddings(openai_api_key='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')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7d7d6396",
      "metadata": {
        "id": "7d7d6396"
      },
      "outputs": [],
      "source": [
        "# initialize pinecone\n",
        "pinecone.init(\n",
        "    api_key=PINECONE_API_KEY,  # find at app.pinecone.io\n",
        "    environment=PINECONE_API_ENV  # next to api key in console\n",
        ")\n",
        "index_name = \"noveloffice\" # put in thenoveloffice name of your pinecone index here"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b8fca0fe",
      "metadata": {
        "id": "b8fca0fe"
      },
      "outputs": [],
      "source": [
        "docsearch = Pinecone.from_texts([t.page_content for t in texts], embeddings, index_name=index_name)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "842eca39",
      "metadata": {
        "id": "842eca39"
      },
      "outputs": [],
      "source": [
        "query = \"who is david goggins?\"\n",
        "docs = docsearch.similarity_search(query)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "216ba3ba",
      "metadata": {
        "id": "216ba3ba",
        "outputId": "09622c2d-83f3-4b6d-a8ad-1166f6cf0acb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ABOUT\tTHE\tAUTHOR\n",
            "DAVID\tGOGGINS\n",
            "\tis\ta\tretired\tNavy\tSEAL\tand\tthe\tonly\tmember\tof\tthe\tU.S.\n",
            "Armed\tForces\tever\tto\tcomplete\tSEAL\ttraining,\tU.S.\tArmy\tRanger\tSchool,\tand\n",
            "Air\tForce\tTactical\tAir\tController\ttraining.\tGoggins\thas\tcompeted\tin\tmore\tthan\n",
            "sixty\tultra-marathons,\ttriathlons,\tand\tultra-triathlons,\tsetting\tnew\tcourse\trecords\n",
            "and\tregularly\tplacing\tin\tthe\ttop\tfive.\tA\tformer\tGuinness\tWorld\tRecord\tholder\n",
            "for\tcompleting\t4,030\tpull-ups\tin\tseventeen\thours,\t\n"
          ]
        }
      ],
      "source": [
        "# Here's an example of the first document that was returned\n",
        "print(docs[0].page_content[:450])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c285eb03",
      "metadata": {
        "id": "c285eb03"
      },
      "source": [
        "### 5) Query those docs to get your answer back"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e06f96ef",
      "metadata": {
        "id": "e06f96ef"
      },
      "outputs": [],
      "source": [
        "from langchain.llms import OpenAI\n",
        "from langchain.chains.question_answering import load_qa_chain"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a1355769",
      "metadata": {
        "id": "a1355769"
      },
      "outputs": [],
      "source": [
        "llm = OpenAI(temperature=0, openai_api_key=\"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\")\n",
        "chain = load_qa_chain(llm, chain_type=\"stuff\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fe0a16a8",
      "metadata": {
        "id": "fe0a16a8"
      },
      "source": [
        "# QUESTION 1?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f03396a2",
      "metadata": {
        "id": "f03396a2",
        "outputId": "9bd0c12b-f9ba-401c-b943-0a52e807516b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "' David Goggins is a retired Navy SEAL and the only member of the U.S. Armed Forces ever to complete SEAL training, U.S. Army Ranger School, and Air Force Tactical Air Controller training. He has competed in more than sixty ultra-marathons, triathlons, and ultra-triathlons, setting new course records and regularly placing in the top five. He is also a former Guinness World Record holder for completing 4,030 pull-ups in seventeen hours, and a much-sought-after public speaker.'"
            ]
          },
          "execution_count": 35,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "query = \"who is david goggins?\"\n",
        "docs = docsearch.similarity_search(query)\n",
        "chain.run(input_documents=docs, question=query)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a0cc4530",
      "metadata": {
        "id": "a0cc4530",
        "outputId": "89a0aabd-136b-49a6-9aa9-a64393d7f9fa"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "' The author of this book is David Goggins.'"
            ]
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "query = \"WHO IS AUTHOR OF THIS BOOK?\"\n",
        "docs = docsearch.similarity_search(query)\n",
        "chain.run(input_documents=docs, question=query)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1150f83e",
      "metadata": {
        "id": "1150f83e"
      },
      "source": [
        "# QUESTION 2?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "303c29f5",
      "metadata": {
        "id": "303c29f5",
        "outputId": "a2458506-bb90-4d20-d498-c43da189d54a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "' The world record that the speaker was attempting to break was the record for the most pull-ups in a 24-hour period, which was 4,020.'"
            ]
          },
          "execution_count": 31,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "query = \"WORLD RECORD?\"\n",
        "docs = docsearch.similarity_search(query)\n",
        "chain.run(input_documents=docs, question=query)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "91f4a69c",
      "metadata": {
        "id": "91f4a69c"
      },
      "source": [
        "# QUESTION 3?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a1352878",
      "metadata": {
        "id": "a1352878",
        "outputId": "3b2dfc53-bf7b-4511-969f-87c1591d1e27"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "\" Physical training is a great way to learn how to manage your thought process and keep your mind strong. When you're working out, your focus is more likely to be single pointed and your response to stress and pain is immediate and measurable. Doing this can help you make decisions that don't come down to physical ability.\""
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "query = \"HOW TO KEEP MIND STRONG?\"\n",
        "docs = docsearch.similarity_search(query)\n",
        "chain.run(input_documents=docs, question=query)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#THANK YOU"
      ],
      "metadata": {
        "id": "fWRZGkwtVqgI"
      },
      "id": "fWRZGkwtVqgI"
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "MfWkkGp6VvHV"
      },
      "id": "MfWkkGp6VvHV",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}